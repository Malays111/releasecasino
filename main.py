from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from config import TELEGRAM_TOKEN
import bot
import asyncio
import signal
import os
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_instance = None
dp = None
storage = None
bot_process_id = None

def check_existing_bot_instances():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ psutil)"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    return False

def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global bot_instance, dp, storage
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å MemoryStorage
    bot_instance = Bot(token=TELEGRAM_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –ü–µ—Ä–µ–¥–∞–µ–º dp –∏ bot –≤ bot.py
    bot.bot = bot_instance
    bot.dp = dp
    bot.setup_handlers()

def signal_handler(signum, frame, loop):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global bot_process_id
    signal_names = {
        signal.SIGINT: "SIGINT (Ctrl+C)",
        signal.SIGTERM: "SIGTERM"
    }

    signal_name = signal_names.get(signum, f"—Å–∏–≥–Ω–∞–ª {signum}")
    print(f"\nüîÑ –ü–æ–ª—É—á–µ–Ω {signal_name}. –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if bot_process_id:
        try:
            with open(f"bot_{bot_process_id}.stop", 'w') as f:
                f.write(str(time.time()))
        except:
            pass

    loop.call_soon_threadsafe(loop.stop)


async def on_startup():
    print("VanishCasino Bot –∑–∞–ø—É—â–µ–Ω!")
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
    print("  restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await bot.async_db.initialize()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        await bot.load_initial_settings()
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    try:
        print("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await bot.preload_data()
        print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def on_shutdown():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    try:
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if hasattr(bot, 'user_balance_cache'):
            print(f"   ‚Ä¢ –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤: {len(bot.user_balance_cache)} –∑–∞–ø–∏—Å–µ–π")
        if hasattr(bot, 'user_stats_cache'):
            print(f"   ‚Ä¢ –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {len(bot.user_stats_cache)} –∑–∞–ø–∏—Å–µ–π")
        if hasattr(bot, 'top_deposited_cache'):
            print(f"   ‚Ä¢ –ö—ç—à —Ç–æ–ø–æ–≤: {len(bot.top_deposited_cache)} –∑–∞–ø–∏—Å–µ–π")
        print("‚úÖ –ö—ç—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–µ–π: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    try:
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await bot.async_db.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_instance, dp

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    initialize_bot()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è startup/shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–æ–ø–æ–≤
    asyncio.create_task(bot.update_top_cache())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    loop = asyncio.get_event_loop()
    signal.signal(signal.SIGINT, lambda s, f: signal_handler(s, f, loop))
    signal.signal(signal.SIGTERM, lambda s, f: signal_handler(s, f, loop))


    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        await dp.start_polling(bot_instance, skip_updates=False)
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    restart_count = 0
    max_restarts = 5

    while restart_count < max_restarts:
        try:
            await run_bot()
            break  # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except Exception as e:
            restart_count += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}/{max_restarts}): {e}")

            if restart_count < max_restarts:
                print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
            else:
                print("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤")
                break

    print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main())